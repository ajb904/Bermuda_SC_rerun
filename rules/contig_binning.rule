import csv
from shutil import copyfile

rule bin_contigs:
    input:
        expand(binned_dir + "{sample}_bins/{sample}_1000.summary", sample=SAMPLES),
        expand(checkM_dir + "{sample}_1000/summary.tsv", sample=SAMPLES),
        expand(tricho_bin_dir + "{sample}_1000_tricho_assembly.fasta", sample=SAMPLES),
        expand(tricho_bin_dir + "{sample}_1000_tricho_assembly_R{read}.fastq.gz", sample=SAMPLES, read=[1,2]),
        expand(tricho_bin_dir + "{sample}_1000_tricho_assembly_single.fastq.gz", sample=SAMPLES)

rule get_contig_coverage:
    input:
        full_assembly_dir + "{sample}/read_alignment/{sample}_v_assembly{minsize}.bam"
    output:
        full_assembly_dir + "{sample}/read_alignment/{sample}_v_assembly{minsize}_cov.tsv"
    shell:
        """
        samtools depth -a {input} | awk 'BEGIN {{OFS="\\t"}} {{ sum[$1] += $2; count[$1] += 1 }} END {{ for ( key in count ) {{ print key, sum[key] / count[key] }} }}' | sort > {output}
        """


rule maxbin:
# Need to do export LD_LIBRARY_PATH=~/.local/lib64:$LD_LIBRARY_PATH to make maxbin work
    input:
        contigs=full_assembly_dir + "{sample}/scaffolds_{minsize}.fasta",
        cov=full_assembly_dir + "{sample}/read_alignment/{sample}_v_assembly{minsize}_cov.tsv"
    output:
        bins=binned_dir + "{sample}_bins/{sample}_{minsize}.summary"
    params:
        prefix=lambda w, output: os.path.splitext(output.bins)[0]
    shell:
        "run_MaxBin.pl -contig {input.contigs} -abund {input.cov} -out {params.prefix} -min_contig_length {wildcards.minsize}"

#CheckM, to get taxonomy summary
rule checkm_tax_summary:
#export PATH=$PATH:~/Downloads/pplacer-Linux-v1.1.alpha19/
    input:
        bins=binned_dir + "{sample}_bins/{sample}_{minsize}.summary"
    output:
        table=checkM_dir + "{sample}_{minsize}/summary.tsv",
        align=checkM_dir + "{sample}_{minsize}/aligns.out"
    params:
        bin_dir=lambda w, input: os.path.dirname(input.bins),
        out_dir=lambda w, output: os.path.dirname(output.table)
    shell:
        "checkm lineage_wf -x fasta -a {output.align} -f {output.table} --tab_table {params.bin_dir} {params.out_dir}"

#Get tricho genome bin (the one with the highest coverage and/or assigned as cyanobacteria by checkM)
#Index tricho genome bin
rule get_tricho_bin:
    input:
        table=checkM_dir + "{sample}_{minsize}/summary.tsv"
    output:
        fasta=tricho_bin_dir + "{sample}_{minsize}_tricho_assembly.fasta",
        faix=tricho_bin_dir + "{sample}_{minsize}_tricho_assembly.fasta.fai"
    run:
        with open(input.table) as tsvfile:
            tsv = csv.reader(tsvfile, dialect="excel-tab")
            for row in tsv:
                if row[1] == "p__Cyanobacteria (UID2192)":
                    bin_name = row[0]
                    break

            bin_fasta_name = "results/maxbin/{}_bins/{}.fasta".format(wildcards.sample, bin_name)

            copyfile(bin_fasta_name, output.fasta)
            shell("samtools faidx {output.fasta}")

rule make_tricho_bed:
    input:
        faix=tricho_bin_dir + "{sample}_{minsize}_tricho_assembly.fasta.fai"
    output:
        bed=tricho_bin_dir + "{sample}_{minsize}_tricho_assembly.bed"
    shell:
        """awk 'BEGIN {{FS="\t"}}; {{print $1 FS "0" FS $2}}' {input.faix} > {output.bed}"""

rule get_tricho_bam:
    input:
        bam=full_assembly_dir + "{sample}/read_alignment/{sample}_v_assembly{minsize}.bam",
        bed=tricho_bin_dir + "{sample}_{minsize}_tricho_assembly.bed"
    output:
        bam=tricho_bin_dir + "{sample}_{minsize}_tricho_assembly.bam"
    shell:
        "samtools view -b -L {input.bed} {input.bam} > {output.bam}"

rule extract_tricho_reads:
    input:
        bam=tricho_bin_dir + "{sample}_{minsize}_tricho_assembly.bam"
    output:
        fq1=tricho_bin_dir + "{sample}_{minsize}_tricho_assembly_R1.fastq.gz",
        fq2=tricho_bin_dir + "{sample}_{minsize}_tricho_assembly_R2.fastq.gz",
        fq0=tricho_bin_dir + "{sample}_{minsize}_tricho_assembly_single.fastq.gz",
    shell:
        "samtools sort -n {input.bam} | samtools fastq -1 {output.fq1} -2 {output.fq2} -s {output.fq0} -"
