rule bin_contigs:
    input:
        expand(binned_dir + "{sample}_bins/{sample}_1000.summary", sample=SAMPLES),
        expand(checkM_dir + "{sample}_1000/summary.tsv", sample=SAMPLES)

rule get_contig_coverage:
    input:
        full_assembly_dir + "{sample}/read_alignment/{sample}_v_assembly{minsize}_qualimap/genome_results.txt"
    output:
        full_assembly_dir + "{sample}/read_alignment/{sample}_v_assembly{minsize}_cov.tsv"
    shell:
        """
        samtools depth -a {input} | awk 'BEGIN {{OFS="\\t"}} {{ sum[$1] += $2; count[$1] += 1 }} END {{ for ( key in count ) {{ print key, sum[key] / count[key] }} }}' | sort > {output}
        """


rule maxbin:
# Need to do export LD_LIBRARY_PATH=~/.local/lib64:$LD_LIBRARY_PATH to make maxbin work
    input:
        contigs=full_assembly_dir + "{sample}/scaffolds_{minsize}.fasta",
        cov=full_assembly_dir + "{sample}/read_alignment/{sample}_v_assembly{minsize}_cov.tsv"
    output:
        bins=binned_dir + "{sample}_bins/{sample}_{minsize}.summary"
    params:
        prefix=lambda w, output: os.path.splitext(output.bins)[0]
    shell:
        "run_MaxBin.pl -contig {input.contigs} -abund {input.cov} -out {params.prefix} -min_contig_length {wildcards.minsize}"

#CheckM, to get taxonomy summary
rule checkm_tax_summary:
    input:
        bins=binned_dir + "{sample}_bins/{sample}_{minsize}.summary"
    output:
        table=checkM_dir + "{sample}_{minsize}/summary.tsv",
        align=checkM_dir + "{sample}_{minsize}/aligns.out"
    params:
        bin_dir=lambda w, input: os.path.dirname(input.bins),
        out_dir=lambda w, output: os.path.dirname(output.table)
    shell:
        "checkm lineage_wf -x fasta -a {output.align} -f {output.table} --tab_table {params.bin_dir} {params.out_dir}"

#Get tricho genome bin (the one with the highest coverage and/or assigned as cyanobacteria by checkM)

#Index tricho genome bin

#Align reads to genome bin with bowtie2 and extract to fastq (could also do this with Samtools from previous read alignments?)

#Reassemble extracted reads.
